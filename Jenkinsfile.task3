pipeline {

    agent {
        docker {
            image "docker-node-agent:1.0.0"
        }
    }

    stages {

        stage('Choose input params') {
            steps {
                script {
                    def branches = sh returnStdout: true, script: "git branch -r"
                    
                    def branch_choices = []
                    branches.split("\n").each { branch ->
                        branch_choices += branch.replaceAll("\\s+", "")
                    }
                    def branch_choice_param = new ChoiceParameterDefinition("Branch name", "Branch name which will be deployed")
                    branch_choice_param.setChoices(branch_choices)

                    def env_choice_param = new ChoiceParameterDefinition('Environment variable', "Where chosen branch should be deployed")
                    env_choice_param.setChoices(['dev', 'prod'])

                    def userInput = input id: 'Input', message: 'Choose deployment config', parameters: [branch_choice_param, env_choice_param]

                    print userInput["Branch name"]
                    def chosen_branch = userInput["Branch name"]
                    print userInput["Environment variable"]
                    def chosen_env = userInput["Environment variable"]
                    CHOSEN_ENV = chosen_env

                    sh "git checkout $chosen_branch"
                }
            }
        }

        stage('Compile project') {
            steps {

                // inject proper backend url
                dir("src") {
                    withCredentials([string(credentialsId: "backend-url-${CHOSEN_ENV}", variable: 'backend_url')]) {
                        // some block
                        sh "cat agent.js | head -n 5 > new-agent.js"
                        sh "printf \"const API_ROOT = \'${backend_url}\';\"   >> new-agent.js"
                        sh "cat agent.js | tail -n 90 >> new-agent.js"
                        sh "mv new-agent.js agent.js"
                    }
                }

                sh "npm install"
            }
        }

        stage('Build project') {
            steps {
                sh "npm run-script build"
            }
        }

        stage('Push to Nexus') {
            steps {
                script {
                    sh "tar -czf frontend-${BUILD_NUMBER}.tar.gz ./build"
                    def artifact_name = "frontend-${BUILD_NUMBER}"
                    print "${CHOSEN_ENV}"
                    nexusArtifactUploader artifacts: [[artifactId: 'devops-training-frontend', classifier: "${CHOSEN_ENV}", file: "${artifact_name}.tar.gz", type: 'tar.gz']], credentialsId: 'nexus_cred', groupId: 'by.brest.project', nexusUrl: 'nexus-solodukha.test.coherentprojects.net/', nexusVersion: 'nexus3', protocol: 'https', repository: 'training', version: "${BUILD_NUMBER}"
                }
            }
        }

        stage('Deploy to server') {
            steps {
                script {
                    sh ""
                }
            }
        }
    }
}